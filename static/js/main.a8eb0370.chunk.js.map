{"version":3,"sources":["Navigation.js","Task.js","Project.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","react_default","a","createElement","className","src","alt","href","Component","Task","_this","this","onClick","props","deleteTask","name","toggleCompleteTask","isComplete","Project","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","taskName","taskList","tasks","splice","findIndex","element","updateProjectList","currentStatus","forEach","createNewProjectTask","setState","currentTaskInput","push","state","isEditing","e","preventDefault","target","value","_this2","deleteProject","type","onChange","handleInputChange","map","task","i","src_Task","key","id","App","submitToLocalStorage","projectData","JSON","stringify","projectList","localStorage","setItem","handleLocalStorage","data","parse","getItem","undefined","currentProjectInput","bind","assertThisInitialized","newProject","unshift","projectName","updatedProject","index","src_Navigation","onSubmit","handleNewProject","length","project","src_Project","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8eb0370.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Navigation extends Component {\r\n  render() {\r\n    return (\r\n      <nav>\r\n        <div className=\"nav-main\">\r\n          <div className=\"headers\">\r\n            <h1>CorkBoard</h1>\r\n            <h2>Simple Planning</h2>\r\n          </div> \r\n          <img src=\"./images/LogoNoShadow.png\" alt=\"main-logo\"/>\r\n        </div>\r\n        <ul>\r\n            <li><a href=\"https://github.com/ezeaspie/corkboard-to-do\">View code on Github</a></li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navigation;\r\n","import React, { Component } from 'react';\r\n\r\nclass Task extends Component {\r\n  render() {\r\n    return (\r\n      <li className=\"task\">\r\n        <div className=\"button-container\">\r\n          <button\r\n          onClick={()=>{this.props.deleteTask(this.props.name)}}\r\n          ><img alt=\"delete\" src=\"./images/delete.png\"/></button>\r\n          <button\r\n          onClick={()=>{this.props.toggleCompleteTask(this.props.isComplete,this.props.name)}}\r\n          >\r\n          <img alt=\"incomplete\"\r\n          className={!this.props.isComplete?\"visible-icon\":\"hidden-icon\"} \r\n          src=\"./images/unchecked.png\" />\r\n          <img alt=\"complete\" \r\n          className={!this.props.isComplete?\"hidden-icon\":\"visible-icon\"} \r\n          src=\"./images/checked.png\"/>\r\n          </button>\r\n        </div>\r\n        <h4>{this.props.isComplete?<s>{this.props.name}</s>:this.props.name}</h4>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Task;\r\n","import React, { Component } from 'react';\r\nimport Task from './Task';\r\n\r\nclass Project extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            currentTaskInput: \"\",\r\n            isEditing:false,\r\n        }\r\n    }\r\n\r\n    handleInputChange(e){\r\n        e.preventDefault();\r\n        this.setState({currentTaskInput:e.target.value});\r\n    }\r\n\r\n    deleteTask = (taskName) => {\r\n        let taskList = this.props.tasks;\r\n        taskList.splice(taskList.findIndex(element=>element.name === taskName),1);\r\n\r\n        this.props.updateProjectList(this.props.name,{name:this.props.name, tasks:taskList})\r\n    }\r\n\r\n    toggleCompleteTask = (currentStatus,name) => {\r\n        let taskList = this.props.tasks;\r\n\r\n        taskList.forEach(element => {\r\n            if(element.name === name){\r\n                element.isComplete = !currentStatus;\r\n            }\r\n        });\r\n\r\n        this.props.updateProjectList(this.props.name,{name:this.props.name, tasks:taskList})\r\n    }\r\n\r\n    createNewProjectTask = () => {\r\n        this.setState({currentTaskInput:\"\"})\r\n        let taskFactory = (name) =>{\r\n            return {name, isComplete:false}\r\n        }\r\n        let taskList = this.props.tasks;\r\n\r\n        taskList.push(taskFactory(this.state.currentTaskInput));\r\n        \r\n        this.props.updateProjectList(this.props.name,{name:this.props.name, tasks:taskList})\r\n        //Add this task to the current project and then update the overall list with new project.\r\n    }\r\n\r\n  render() {\r\n    return (\r\n    <div className=\"project\">\r\n        <h3>{this.props.name}</h3>\r\n        <div className=\"project-main\">\r\n            <button \r\n            className=\"delete\"\r\n            onClick={()=>{this.props.deleteProject(this.props.name)}}\r\n            >Delete this Project</button>\r\n            <div className=\"add-new-task\">\r\n                <input \r\n                type=\"text\"\r\n                value={this.state.currentTaskInput}\r\n                onChange={(e)=>this.handleInputChange(e)}\r\n                ></input>\r\n                <button className=\"button-image\" onClick={this.createNewProjectTask}>\r\n                    <img alt=\"add\" src=\"./images/add.png\"/>\r\n                </button>\r\n            </div>\r\n            <ul>\r\n            {\r\n                this.props.tasks.map((task, i)=>{\r\n                return(\r\n                    <Task \r\n                    toggleCompleteTask={this.toggleCompleteTask}\r\n                    deleteTask={this.deleteTask}\r\n                    key={this.props.id + i + task.name}\r\n                    name={task.name}\r\n                    isComplete={task.isComplete}\r\n                    />\r\n                )\r\n                })\r\n            }\r\n            </ul>\r\n        </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Project;\r\n","import React, { Component } from 'react';\nimport Navigation from './Navigation';\nimport Project from './Project';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      currentProjectInput:\"\",\n      projectList: [\n        {\n          name:\"My To-Do List!\",\n          tasks:[\n            {\n              name:\"Brush Teeth\",\n              isComplete:true,\n            },\n            {\n              name:\"Finish Website\",\n              isComplete:false,\n            },\n            {\n              name:\"Go for a 30 minute run\",\n              isComplete:true,\n            }\n          ]\n        }\n      ],\n    }\n\n    this.deleteProject = this.deleteProject.bind(this);\n    this.updateProjectList = this.updateProjectList.bind(this);\n  }\n\n  componentWillMount(){\n    this.handleLocalStorage();\n  }\n\n  submitToLocalStorage = () => {\n    let projectData = JSON.stringify(this.state.projectList);\n    localStorage.setItem(\"projectData\",projectData);\n  }\n\n  handleLocalStorage = () => {\n    let data = JSON.parse(localStorage.getItem(\"projectData\"));\n    if(data === undefined || data=== null){\n      return;\n    }\n    else{\n      this.setState({projectList:data});\n    }\n  }\n\n  handleNewProject(e){\n    e.preventDefault();\n    let projectList = this.state.projectList;\n    let newProjectFactory = (name) => {\n      return {name,tasks:[]}\n    }\n\n    let newProject = newProjectFactory(this.state.currentProjectInput);\n\n    projectList.unshift(newProject);\n\n    this.setState({projectList, currentProjectInput:\"\"},this.submitToLocalStorage);\n  }\n\n  handleInputChange(e){\n    e.preventDefault();\n    this.setState({currentProjectInput:e.target.value});\n  }\n\n  deleteProject(projectName){\n    let projectList = this.state.projectList;\n    \n    projectList.splice(projectList.findIndex(element=>element.name === projectName),1);\n\n    this.setState({projectList},this.submitToLocalStorage);\n  }\n\n  updateProjectList(projectName, updatedProject){\n    let projectList = this.state.projectList;\n    let index = projectList.findIndex(element=>element.name === projectName);\n\n    projectList[index] = updatedProject;\n\n    this.setState({projectList},this.submitToLocalStorage)\n\n\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navigation />\n        <form onSubmit={(e)=>{this.handleNewProject(e)}}>\n          <input \n          type=\"text\" \n          name=\"project-name\" \n          value={this.state.currentProjectInput}\n          onChange={(e)=>{this.handleInputChange(e)}}\n          ></input>\n          <input \n          type=\"submit\"\n          className=\"add-project\"\n          value=\"Create new project\"\n          />\n        </form>\n        <div className=\"project-list\">\n          {\n            this.state.projectList.length === 0?\n            <div>\n              <img src=\"./images/Logo.png\" alt=\"logo\"></img>\n              <h4>There seems to be nothing here... :(</h4>\n              <h5>Try adding a new project to populate your CorkBoard!</h5>\n            </div>\n            :\n              this.state.projectList.map((project,i)=>{\n                return (\n                  <Project \n                    key={\"project\"+i}\n                    id={i}\n                    name={project.name}\n                    tasks={project.tasks}\n                    deleteProject={this.deleteProject}\n                    updateProjectList={this.updateProjectList}\n                  />\n                )\n              })\n          }\n        </div>\n        <footer>\n          <p>Created by <a href=\"https://github.com/ezeaspie\">Ezequiel Espinoza Diaz</a></p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}